name: Azure Pipelines

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '478e149e-3171-47b6-93db-bd3c073fdc60'

  # Web app name
  webAppName: 'myProjectApplication-AppService-app'

  # Agent VM image name
  vmImageName: 'ubuntu-latest' #Ubuntu-16.04

  # Environment name
  environmentName: 'test'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.9
  pythonVersion: '3.9'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      name: Hosted Ubuntu 1604
      vmImage: $(vmImageName)
    steps:
    # Terraform VM deployment
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'KNOWN_HOSTS_STRING'
        sshPublicKey: $(Public-Key)
        sshKeySecureFile: 'id_rsa'

    - task: DownloadSecureFile@1
      name: RSApublicKey 
      # reference the secure file's path on the agent, 
      # like $(mySecureFile.secureFilePath)
      inputs:
        secureFile: 'id_rsa'

    - task: CopyFiles@2
      inputs:
        SourceFolder: $(Agent.TempDirectory)
        Contents: 'id_rsa.pub'
        TargetFolder: '/home/vsts/.ssh'

    - task: TerraformCLI@0
      inputs:
        command: 'init'
        workingDirectory: 'terraform/environments/$(environmentName)'
        allowTelemetryCollection: true

    - task: TerraformCLI@0
      inputs:
        command: 'apply'
        workingDirectory: 'terraform/environments/$(environmentName)'
        allowTelemetryCollection: true

###############
# Run Postman #
###############
    - task: CmdLine@2
      inputs:
        script: |
          sudo npm install -g newman
          sudo npm install -g newman-reporter-junitfull
      displayName: "Install newman"
   
    - task: CmdLine@2
      inputs:
        script: 'newman run $(Build.SourcesDirectory)/automatedtesting/postman/data_validation_test.postman_collection.json -e "$(Build.SourcesDirectory)/automatedtesting/postman/userva.postman_environment.json" -r cli,junitfull --reporter-junitfull-export JUnitReportDataVal.xml'
      displayName: "Run Postman validation test"
      continueOnError: True
    - task: CmdLine@2
      inputs:
        script: 'newman run $(Build.SourcesDirectory)/automatedtesting/postman/regression_test.postman_collection.json -e "$(Build.SourcesDirectory)/automatedtesting/postman/userva.postman_environment.json" -r cli,junitfull --reporter-junitfull-export JUnitReportRegr.xml'   
      displayName: "Run Postman regression test"
      continueOnError: True    

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'JUnitReport*.xml'
      continueOnError: True

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: DeployWebApp
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              appType: webApp
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

- stage: DeployFakeRestAPI
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
           - checkout: self

           - task: CmdLine@2
             inputs:
              script: |
                cd $(Build.SourcesDirectory)/automatedtesting/jmeter/
                VERSION='5.3'
                URL=https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${VERSION}.tgz
                # Download Jmeter.
                curl $URL > apache-jmeter-${VERSION}.tgz
                gunzip apache-jmeter-${VERSION}.tgz
                tar -xvf apache-jmeter-${VERSION}.tar
                mkdir -p $(Build.SourcesDirectory)/automatedtesting/jmeter/report
                ./apache-jmeter-${VERSION}/bin/jmeter -n -t Starter.jmx -l report/results-starter.jtl -e -o $(Build.SourcesDirectory)/automatedtesting/jmeter/report/starter
                echo endurance test
                ./apache-jmeter-${VERSION}/bin/jmeter -n -t EnduranceTest.jmx -l report/endurance-test-result.jtl -e -o $(Build.SourcesDirectory)/automatedtesting/jmeter/report/endurance
                echo stress test
                ./apache-jmeter-${VERSION}/bin/jmeter -n -t StressTest.jmx -l report/stress-test-result.jtl -e -o $(Build.SourcesDirectory)/automatedtesting/jmeter/report/stress
           - task: PublishPipelineArtifact@1
             displayName: Publish JMeter Report
             inputs:
              targetPath:  $(Build.SourcesDirectory)/automatedtesting/jmeter/report
              artifact: jmeter

- stage: VirtualMachineDeploy
  jobs:
  - deployment: VMDeploy
    pool:
      vmImage: vs2017-win2016
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                ls -a 
                python3 -m venv ~/.venv
                source ~/.venv/bin/activate
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install chromium-chromedriver
                sudo pip3 install selenium
                pip freeze
                which python
                which pip
                export PATH=$PATH:/usr/bin/chromedriver
                python3 $(Build.SourcesDirectory)/automatedtesting/selenium/login.py

- stage: Destroy
  displayName: 'Destroy Infrastructure created'
  dependsOn: 
   - DeployWebApp
   - DeployFakeRestAPI
   - VirtualMachineDeploy
  condition: succeeded()
  jobs:
  - job: DestroyJob
    pool:
      name: Hosted Ubuntu 1604
      vmImage: $(vmImageName)
    steps:
      - task: InstallSSHKey@0
        inputs:
          knownHostsEntry: 'KNOWN_HOSTS_STRING'
          sshPublicKey: $(Public-Key)
          sshKeySecureFile: 'id_rsa'
      - task: TerraformCLI@0
        inputs:
          command: 'init'
          workingDirectory: 'terraform/environments/$(environmentName)'
          allowTelemetryCollection: true
      - task: DownloadSecureFile@1
        name: RSApublicKey 
        # reference the secure file's path on the agent, 
        # like $(mySecureFile.secureFilePath)
        inputs:
          secureFile: 'id_rsa'

      - task: CopyFiles@2
        inputs:
          SourceFolder: $(Agent.TempDirectory)
          Contents: 'id_rsa.pub'
          TargetFolder: '/home/vsts/.ssh'
      - task: TerraformCLI@0
        inputs:
          command: 'destroy'
          workingDirectory: 'terraform/environments/$(environmentName)'
          allowTelemetryCollection: true