# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

name: Azure Pipelines

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '478e149e-3171-47b6-93db-bd3c073fdc60'

  # Web app name
  webAppName: 'myProjectApplication-project3-app'

  # Agent VM image name
  vmImageName: 'ubuntu-latest' #Ubuntu-16.04

  # Environment name
  environmentName: 'test'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.9
  pythonVersion: '3.9'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      name: Hosted Ubuntu 1604
      vmImage: $(vmImageName)
    steps:
    #- task: UsePythonVersion@0
    #  inputs:
    #    versionSpec: '$(pythonVersion)'
    #  displayName: 'Use Python $(pythonVersion)'

    #- script: |
    #    python -m venv antenv
    #    source antenv/bin/activate
    #    python -m pip install --upgrade pip
    #    pip install setup
    #    pip install -r requirements.txt
    #  workingDirectory: $(projectRoot)
    #  displayName: "Install requirements"

    # Needed for Terraform VM deployment
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - task: TerraformCLI@0
      inputs:
        command: 'validate'
        allowTelemetryCollection: true

    - task: TerraformCLI@0
      inputs:
        command: 'init'
        workingDirectory: 'terraform/environments/$(environmentName)'
        allowTelemetryCollection: true

    - task: TerraformCLI@0
      inputs:
        command: 'apply'
        workingDirectory: 'terraform/environments/$(environmentName)'
        allowTelemetryCollection: true

    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'KNOWN_HOSTS_STRING'
        sshPublicKey: $(Public-Key)
        sshKeySecureFile: 'id_rsa'

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              appType: webApp
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path